import os
import json
import random
import string
import threading
import time
import requests # For synchronous HTTP requests to Gemini API
from flask import (
    Flask, render_template, request, redirect,
    url_for, session, flash, current_app # Import current_app
)
from flask_socketio import SocketIO, join_room, leave_room, emit
from werkzeug.security import generate_password_hash, check_password_hash

# --- App & SocketIO Setup ---
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'a_very_long_and_random_secret_key_for_doppelgangers_game_v3.0')
app.config['SESSION_PERMANENT'] = True
# IMPORTANT FIX: Configure SERVER_NAME and PREFERRED_URL_SCHEME for url_for in background contexts
app.config['SERVER_NAME'] = '127.0.0.1:83' # Use your local host and port
app.config['PREFERRED_URL_SCHEME'] = 'http' # Use http for local development
socketio = SocketIO(app, cors_allowed_origins='*')

# --- Gemini API Key ---
GEMINI_API_KEY = "AIzaSyDfs1BrtrkT1Pr5geRsD3UanYAq63qxO54"

# --- Constants & Files ---
USER_FILE = 'users.json'
PROMPT_FILE = 'storage.txt'
MAX_ROUNDS = 3
ANSWER_TIME = 45
VOTING_TIME = 30
RESULTS_TIME = 10

# --- In-Memory State ---
users = {}
game_rooms = {}
sid_to_user = {}

# --- Utility Functions ---
def load_data():
    global users
    if os.path.exists(USER_FILE):
        try:
            with open(USER_FILE, 'r') as f:
                users = json.load(f)
        except json.JSONDecodeError:
            print(f"Warning: {USER_FILE} is empty or corrupted. Initializing empty users.")
            users = {}
    else:
        with open(USER_FILE, 'w') as f:
            json.dump({}, f)

def save_users():
    with open(USER_FILE, 'w') as f:
        json.dump(users, f, indent=4)

def generate_room_id(length=5):
    chars = string.ascii_uppercase + string.digits
    while True:
        code = ''.join(random.choice(chars) for _ in range(length))
        if code not in game_rooms:
            return code

def get_prompts():
    try:
        with open(PROMPT_FILE, 'r') as f:
            prompts = [line.strip() for line in f if line.strip()]
        return prompts if prompts else ["Describe your favorite day.", "What's a strange dream you've had?"]
    except FileNotFoundError:
        print(f"ERROR: {PROMPT_FILE} not found during get_prompts. Returning default.")
        return ["Describe your favorite day.", "What's a strange dream you've had?"]

def get_room_and_user_from_session():
    # Note: This function is used by HTTP routes, where context is implicit.
    # For background tasks, session needs to be accessed within app.app_context().
    room_id = session.get('room_id')
    username = session.get('username')
    if not room_id or room_id not in game_rooms or not username:
        return None, None, None
    return room_id, game_rooms[room_id], username

# --- Gemini API Integration ---
def generate_ai_answer_sync(prompt_text: str, human_text: str) -> str:
    print(f"DEBUG: Calling Gemini API for prompt: '{prompt_text}', human_answer: '{human_text}'")

    if not GEMINI_API_KEY:
        print("ERROR: GEMINI_API_KEY is not set. Using placeholder.")
        return f"AI Placeholder: (Human said: {human_text})"

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
    
    system_instruction = (
        "You are playing a party game. Your goal is to generate a response that sounds "
        "human-like and is similar in theme and tone to a given human's answer to a prompt, "
        "but is NOT an exact copy. It should be convincing enough to potentially deceive "
        "other players into thinking it's a real human's response. Do not add any "
        "introductory phrases like 'Here's my version:' or 'As an AI, I would say:'."
    )
    user_query = (
        f"Original Prompt: '{prompt_text}'\n"
        f"Human's Answer: '{human_text}'\n"
        f"Generate a convincing, human-like, but distinct response based on the human's answer. "
        f"Keep it concise and natural, similar to how a person would respond in a casual game."
    )

    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": system_instruction}]},
            {"role": "user", "parts": [{"text": user_query}]}
        ],
        "generationConfig": {"temperature": 0.8, "maxOutputTokens": 100}
    }
    headers = {'Content-Type': 'application/json'}

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload), timeout=20)
        response.raise_for_status()
        response_data = response.json()
        
        candidates = response_data.get('candidates', [])
        if candidates and candidates[0].get('content') and candidates[0]['content'].get('parts'):
            generated_text = candidates[0]['content']['parts'][0].get('text', '').strip()
            if generated_text:
                print(f"DEBUG: Gemini API success. Generated: '{generated_text}'")
                return generated_text
        
        print(f"DEBUG: Gemini API response structure unexpected: {response_data}")
        return f"AI couldn't generate a clear answer for: {human_text}"
    except requests.exceptions.Timeout:
        print("DEBUG: Gemini API request timed out.")
        return f"AI timed out. (Original: {human_text})"
    except requests.exceptions.RequestException as e:
        print(f"DEBUG: Gemini API request error: {e}")
        return f"AI network error. (Original: {human_text})"
    except Exception as e:
        print(f"DEBUG: Unexpected error during Gemini API call: {e}")
        return f"AI failed. (Original: {human_text})"

# --- Timer Class ---
class StoppableTimer(threading.Thread):
    def __init__(self, room_id, duration, callback, *args):
        super().__init__(daemon=True)
        self.room_id = room_id
        self.duration = duration
        self.callback = callback
        self.args = args
        self._stop_event = threading.Event()
        self.start_time = time.time()

    def run(self):
        end_time = self.start_time + self.duration
        while time.time() < end_time and not self._stop_event.is_set():
            time_left = int(end_time - time.time())
            socketio.emit('timer_update', {'time_left': time_left}, room=self.room_id)
            time.sleep(1)
        
        socketio.emit('timer_update', {'time_left': 0}, room=self.room_id)

        if not self._stop_event.is_set():
            with app.app_context(): # Ensure callback runs in app context
                self.callback(self.room_id, *self.args)

    def stop(self):
        self._stop_event.set()
        print(f"DEBUG: Timer for room {self.room_id} stopped.")

# --- Game Phase Logic & Callbacks ---

def start_game(room_id):
    """Initializes and starts the first round of the game."""
    # IMPORTANT FIX: Wrap the entire function content in app.app_context()
    # when it's called as a background task.
    with app.app_context(): 
        room = game_rooms.get(room_id)
        if not room or room.get('game_started'):
            print(f"DEBUG: Attempted to start game in room {room_id} but it's not ready or already started.")
            return

        room.update({
            'game_started': True,
            'current_round': 1,
            'scores': {p['username']: 0 for p in room['players']},
            'player_order': [p['username'] for p in room['players']]
        })
        random.shuffle(room['player_order'])

        print(f"DEBUG: Game starting in room {room_id}. Players: {room['player_order']}")
        
        redirect_url = url_for('answer_route')
        socketio.emit('redirect', {'url': redirect_url}, room=room_id)
        
        # Call subsequent phase start as a background task, which will also run in context
        socketio.start_background_task(time.sleep, 1) # Small delay for redirect
        socketio.start_background_task(start_answer_phase, room_id)

def start_answer_phase(room_id):
    # This function is called as a background task, so its content needs to be in app context.
    # It's already handled by the StoppableTimer's callback wrapper or by start_game calling it.
    with app.app_context(): # Added for safety if called directly without context
        room = game_rooms.get(room_id)
        if not room: return

        room['state'] = "answering"
        room['submitted_answers_count'] = 0
        room['ai_generated_count'] = 0
        room['human_answers'] = {}
        room['ai_answers'] = {}
        room['prompts_for_round'] = {}

        available_prompts = get_prompts()
        if len(available_prompts) < len(room['player_order']):
            print(f"WARNING: Not enough unique prompts for room {room_id}. Reusing some.")
            chosen_prompts = random.sample(available_prompts, len(available_prompts))
            while len(chosen_prompts) < len(room['player_order']):
                chosen_prompts.extend(random.sample(available_prompts, min(len(available_prompts), len(room['player_order']) - len(chosen_prompts))))
        else:
            chosen_prompts = random.sample(available_prompts, len(room['player_order']))
        
        for i, username in enumerate(room['player_order']):
            room['prompts_for_round'][username] = chosen_prompts[i]
            player_obj = next((p for p in room['players'] if p['username'] == username), None)
            if player_obj:
                player_obj['current_prompt'] = chosen_prompts[i]
                player_obj['submitted_answer'] = ""
                player_obj['ai_generated_answer'] = ""

        print(f"DEBUG: Room {room_id} - Round {room['current_round']} - Answer phase started.")
        room['timer_thread'] = StoppableTimer(room_id, ANSWER_TIME, end_answer_phase_timeout)
        room['timer_thread'].start()
        socketio.emit('game_state_update', {'state': room['state'], 'round': room['current_round']}, room=room_id)

def end_answer_phase_timeout(room_id):
    with app.app_context(): # Ensure this callback runs in app context
        room = game_rooms.get(room_id)
        if not room: return
        print(f"DEBUG: Room {room_id} - Answer phase timed out.")
        for player_obj in room['players']:
            username = player_obj['username']
            if not player_obj['submitted_answer']:
                print(f"DEBUG: Room {room_id} - {username} did not answer in time. Forcing submission and AI generation.")
                player_obj['submitted_answer'] = "Didn't answer in time."
                room['human_answers'][username] = "Didn't answer in time."
                room['submitted_answers_count'] += 1
                socketio.start_background_task(
                    process_ai_generation_for_player, room_id, username,
                    player_obj['current_prompt'], player_obj['submitted_answer']
                )
        socketio.start_background_task(check_all_answers_submitted_and_ai_generated, room_id)


def process_ai_generation_for_player(room_id, username, prompt_text, human_answer):
    # This function is called as a background task, so its content needs to be in app context.
    with app.app_context(): # Added for safety if called directly without context
        room = game_rooms.get(room_id)
        if not room: return

        ai_answer = generate_ai_answer_sync(prompt_text, human_answer)
        
        player_obj = next((p for p in room['players'] if p['username'] == username), None)
        if player_obj:
            player_obj['ai_generated_answer'] = ai_answer
            room['ai_answers'][username] = ai_answer
            room['ai_generated_count'] += 1
            print(f"DEBUG: Room {room_id} - AI generated for {username}. AI count: {room['ai_generated_count']}/{len(room['players'])}")
            check_all_answers_submitted_and_ai_generated(room_id)

def check_all_answers_submitted_and_ai_generated(room_id):
    with app.app_context(): # Ensure this callback runs in app context
        room = game_rooms.get(room_id)
        if not room or room['state'] != "answering": return

        num_players = len(room['players'])
        
        print(f"DEBUG: Room {room_id} - Checking answers. Submitted: {room['submitted_answers_count']}/{num_players}, AI Generated: {room['ai_generated_count']}/{num_players}")

        if room['submitted_answers_count'] == num_players and room['ai_generated_count'] == num_players:
            if room['timer_thread']:
                room['timer_thread'].stop()
                room['timer_thread'] = None
            print(f"DEBUG: Room {room_id} - All answers submitted and AI generated. Advancing to voting.")
            
            redirect_url = url_for('voting_route')
            socketio.emit('redirect', {'url': redirect_url}, room=room_id)
            
            socketio.start_background_task(time.sleep, 1) # Small delay for redirect
            socketio.start_background_task(start_voting_phase, room_id)

def start_voting_phase(room_id):
    with app.app_context(): # Ensure this function runs in app context
        room = game_rooms.get(room_id)
        if not room: return

        room['state'] = "judging"
        room['voted_count'] = 0
        room['votes'] = {p['username']: {} for p in room['players']}
        room['judging_pairs'] = []

        for player_obj in room['players']:
            username = player_obj['username']
            human_ans = player_obj.get('submitted_answer', "No Answer")
            ai_ans = player_obj.get('ai_generated_answer', "No AI Answer")
            prompt = player_obj.get('current_prompt', "No Prompt")

            options = [human_ans, ai_ans]
            random.shuffle(options)

            room['judging_pairs'].append({
                'original_author': username,
                'prompt': prompt,
                'options': options,
                'correct_answer': human_ans
            })
        
        print(f"DEBUG: Room {room_id} - Voting phase started.")
        room['timer_thread'] = StoppableTimer(room_id, VOTING_TIME, end_voting_phase_timeout)
        room['timer_thread'].start()
        socketio.emit('game_state_update', {'state': room['state'], 'round': room['current_round']}, room=room_id)
        
        # NEW: Emit voting_data directly to all clients in the room
        # This ensures clients get the data as soon as the phase starts
        all_pairs_for_voting = []
        for pair in room['judging_pairs']:
            # Send all pairs to all clients, let client filter their own out if needed
            all_pairs_for_voting.append(pair)
        socketio.emit('voting_data', {'pairs': all_pairs_for_voting}, room=room_id)


def end_voting_phase_timeout(room_id):
    with app.app_context(): # Ensure this callback runs in app context
        room = game_rooms.get(room_id)
        if not room: return
        print(f"DEBUG: Room {room_id} - Voting phase timed out.")
        socketio.start_background_task(check_all_votes_submitted, room_id)


def check_all_votes_submitted(room_id):
    with app.app_context(): # Ensure this callback runs in app context
        room = game_rooms.get(room_id)
        if not room or room['state'] != "judging": return

        num_players = len(room['players'])
        actual_voted_count = 0
        for voter_username, player_votes in room['votes'].items():
            expected_votes_count = len([p for p in room['players'] if p['username'] != voter_username])
            if len(player_votes) == expected_votes_count:
                actual_voted_count += 1

        print(f"DEBUG: Room {room_id} - Checking votes. Voted: {actual_voted_count}/{num_players}")

        if actual_voted_count == num_players:
            if room['timer_thread']:
                room['timer_thread'].stop()
                room['timer_thread'] = None
            print(f"DEBUG: Room {room_id} - All votes submitted. Advancing to results.")
            
            redirect_url = url_for('results_route')
            socketio.emit('redirect', {'url': redirect_url}, room=room_id)
            
            socketio.start_background_task(time.sleep, 1) # Small delay for redirect
            socketio.start_background_task(start_results_phase, room_id)

def start_results_phase(room_id):
    with app.app_context(): # Ensure this function runs in app context
        room = game_rooms.get(room_id)
        if not room: return

        room['state'] = "results"
        
        round_scores = {p['username']: 0 for p in room['players']}
        
        for voter_username, votes_by_voter in room['votes'].items():
            for pair in room['judging_pairs']:
                author_of_pair = pair['original_author']
                correct_human_ans = pair['correct_answer']
                
                ai_ans_for_author = next((p['ai_generated_answer'] for p in room['players'] if p['username'] == author_of_pair), None)

                voter_choice = votes_by_voter.get(author_of_pair)

                if voter_choice == correct_human_ans:
                    round_scores[voter_username] += 100
                elif voter_choice == ai_ans_for_author:
                    round_scores[author_of_pair] += 50
        
        for username, score_this_round in round_scores.items():
            player_obj = next((p for p in room['players'] if p['username'] == username), None)
            if player_obj:
                player_obj['score'] += score_this_round
                room['scores'][username] = player_obj['score']

        room['current_round'] += 1

        print(f"DEBUG: Room {room_id} - Round {room['current_round']-1} results calculated.")
        socketio.emit('results_data', {
            'round_scores': round_scores,
            'total_scores': room['scores'],
            'current_round': room['current_round'] - 1
        }, room=room_id)

        if room['current_round'] > MAX_ROUNDS:
            next_url = url_for('game_over_route')
            callback_func = end_game
        else:
            next_url = url_for('answer_route')
            callback_func = start_answer_phase

        room['timer_thread'] = StoppableTimer(room_id, RESULTS_TIME, callback_func)
        room['timer_thread'].start()
        socketio.emit('game_state_update', {'state': room['state'], 'round': room['current_round']-1}, room=room_id)


def end_game(room_id):
    with app.app_context(): # Ensure this function runs in app context
        room = game_rooms.get(room_id)
        if not room: return

        room['state'] = "game_over"
        print(f"DEBUG: Room {room_id} - Game Over. Final scores: {room['scores']}")
        
        redirect_url = url_for('game_over_route')
        socketio.emit('redirect', {'url': redirect_url}, room=room_id)
        
        socketio.start_background_task(time.sleep, 5)
        socketio.start_background_task(cleanup_room_after_game, room_id)

def cleanup_room_after_game(room_id):
    with app.app_context(): # Ensure this function runs in app context
        if room_id in game_rooms:
            room = game_rooms[room_id]
            room['game_started'] = False
            room['ready'].clear()
            print(f"DEBUG: Room {room_id} state reset for potential new game or cleanup.")


# --- HTTP Routes ---
@app.route('/')
def index_route():
    if 'room_id' in session:
        session.pop('room_id', None)
    if not session.get('logged_in'):
        session.pop('username', None)
    
    load_data()
    return render_template('index.html', logged_in=session.get('logged_in', False), username=session.get('username', ''))

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        
        if not username or len(password) < 4:
            flash('Username and a password of at least 4 characters are required.', 'error')
            return redirect(url_for('signup'))
        if username in users:
            flash('That username is already taken.', 'error')
            return redirect(url_for('signup'))
        
        users[username] = generate_password_hash(password)
        save_users()
        session.update({'logged_in': True, 'username': username})
        flash(f'Welcome, {username}! You are registered and logged in.', 'success')
        return redirect(url_for('index_route'))
    return render_template('signup.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        
        if username in users and check_password_hash(users.get(username), password):
            session.update({'logged_in': True, 'username': username})
            flash(f'Welcome back, {username}!', 'success')
            return redirect(url_for('index_route'))
        flash('Invalid username or password.', 'error')
        return redirect(url_for('login'))
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index_route'))

@app.route('/action', methods=['POST'])
def game_action():
    action = request.form.get('action')
    username = session.get('username')
    if not username:
        username = request.form.get('username', '').strip()
        if not username:
            flash('A username is required to play.', 'error')
            return redirect(url_for('index_route'))
        session['username'] = username

    room_code = None
    if action == 'create':
        room_code = generate_room_id()
        game_rooms[room_code] = {
            "current_round": 0,
            "players": [],
            "player_sids": {},
            "ready": set(),
            "game_started": False,
            "timer_thread": None,
            "player_order": [],
            "prompts_for_round": {},
            "human_answers": {},
            "ai_answers": {},
            "judging_pairs": [],
            "votes": {},
            "submitted_answers_count": 0,
            "ai_generated_count": 0,
            "voted_count": 0,
            "state": "waiting_for_players"
        }
        print(f"DEBUG: Room {room_code} created by {username}")
    elif action == 'join':
        room_code = request.form.get('room_id', '').upper().strip()
        if not room_code or room_code not in game_rooms:
            flash('Sorry, that room could not be found.', 'error')
            return redirect(url_for('index_route'))
    else:
        flash('An unknown action occurred.', 'error')
        return redirect(url_for('index_route'))

    room = game_rooms[room_code]
    
    current_room_usernames = [p['username'] for p in room['players']]
    if username in current_room_usernames:
        flash('A player with that name is already in the room. Please use a different name or join as a registered user.', 'error')
        return redirect(url_for('index_route'))
    
    if room.get('game_started'):
        flash('That game has already started. You cannot join mid-game.', 'error')
        return redirect(url_for('index_route'))

    room['players'].append({
        "username": username,
        "sid": None,
        "score": 0,
        "current_prompt": "",
        "submitted_answer": "",
        "ai_generated_answer": ""
    })
    
    session['room_id'] = room_code
    flash(f"You {action}ed room {room_code}!", 'success')
    return redirect(url_for('room_route', room_id=room_code))

@app.route('/room/<room_id>')
def room_route(room_id):
    username = session.get('username')
    if not username or session.get('room_id') != room_id or room_id not in game_rooms:
        flash("You are not authorized to access this room. Please join or create a room first.", 'error')
        return redirect(url_for('index_route'))
    
    room = game_rooms[room_id]
    if not any(p['username'] == username for p in room['players']):
        flash("Your player data is not found in this room. Please rejoin.", 'error')
        return redirect(url_for('index_route'))

    return render_template('room.html', room_id=room_id, username=username)

@app.route('/answer')
def answer_route():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "answering":
        flash("Not in the answering phase or room not found.", 'error')
        return redirect(url_for('index_route'))
    
    return render_template('answer.html', round=room.get('current_round', 1))

@app.route('/vote')
def voting_route():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "judging":
        flash("Not in the voting phase or room not found.", 'error')
        return redirect(url_for('index_route'))
    
    return render_template('voting.html', round=room.get('current_round', 1))

@app.route('/results')
def results_route():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "results":
        flash("Not in the results phase or room not found.", 'error')
        return redirect(url_for('index_route'))
    
    return render_template('results.html', round=room.get('current_round', 1) - 1)

@app.route('/game_over')
def game_over_route():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "game_over":
        flash("Game is not over or room not found.", 'error')
        return redirect(url_for('index_route'))
    
    return render_template('game_over.html')

# --- SocketIO Events ---

def update_player_sids_in_room(room_id, username, sid):
    room = game_rooms.get(room_id)
    if room:
        for player_obj in room['players']:
            if player_obj['username'] == username:
                player_obj['sid'] = sid
                room['player_sids'][username] = sid
                print(f"DEBUG: Updated SID for {username} in room {room_id} to {sid}")
                break

@socketio.on('connect')
def on_connect():
    load_data()
    print(f"Client connected: {request.sid}")
    room_id = session.get('room_id')
    username = session.get('username')
    if room_id and username and room_id in game_rooms:
        join_room(room_id)
        sid_to_user[request.sid] = {'room': room_id, 'username': username}
        update_player_sids_in_room(room_id, username, request.sid)
        room = game_rooms[room_id]
        emit('player_update', {
            'players': [p['username'] for p in room['players']],
            'ready_count': len(room['ready'])
        }, room=room_id)
        emit('game_state_update', {'state': room['state'], 'round': room.get('current_round', 0)}, room=request.sid)
    else:
        print(f"DEBUG: Client {request.sid} connected without active room session.")

@socketio.on('disconnect')
def on_disconnect():
    print(f"Client disconnected: {request.sid}")
    user_info = sid_to_user.pop(request.sid, None)
    if user_info:
        room_id, username = user_info['room'], user_info['username']
        room = game_rooms.get(room_id)
        if not room: return

        room['player_sids'].pop(username, None)
        
        player_removed = False
        for i, player_obj in enumerate(room['players']):
            if player_obj['username'] == username:
                del room['players'][i]
                room['ready'].discard(username)
                player_removed = True
                print(f"DEBUG: Removed {username} (SID: {request.sid}) from room {room_id} due to disconnect.")
                break
        
        if player_removed:
            room['player_order'] = [p['username'] for p in room['players']]
            
            socketio.emit('player_update', {
                'players': [p['username'] for p in room['players']],
                'ready_count': len(room['ready'])
            }, room=room_id)

        if not room['players']:
            if room.get('timer_thread'):
                room['timer_thread'].stop()
                room['timer_thread'] = None
            game_rooms.pop(room_id, None)
            print(f"DEBUG: Room {room_id} is empty and has been closed.")
        else:
            if room['state'] == "answering":
                socketio.start_background_task(check_all_answers_submitted_and_ai_generated, room_id)
            elif room['state'] == "judging":
                socketio.start_background_task(check_all_votes_submitted, room_id)


@socketio.on('page_load')
def on_page_load():
    room_id = session.get('room_id')
    username = session.get('username')
    
    if not room_id or not username or room_id not in game_rooms:
        emit('redirect', {'url': url_for('index_route')}, room=request.sid)
        return

    update_player_sids_in_room(room_id, username, request.sid)
    
    room = game_rooms[room_id]
    emit('player_update', {
        'players': [p['username'] for p in room['players']],
        'ready_count': len(room['ready'])
    }, room=room_id)
    emit('game_state_update', {'state': room['state'], 'round': room.get('current_round', 0)}, room=request.sid)


@socketio.on('player_ready')
def on_player_ready(data):
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "waiting_for_players": return

    is_ready = data.get('is_ready')
    if is_ready:
        room['ready'].add(username)
    else:
        room['ready'].discard(username)
    
    socketio.emit('player_update', {
        'players': [p['username'] for p in room['players']],
        'ready_count': len(room['ready'])
    }, room=room_id)

    if len(room['players']) >= 2 and len(room['ready']) == len(room['players']):
        print(f"DEBUG: Room {room_id} - All players ready. Starting game.")
        if room.get('timer_thread'):
            room['timer_thread'].stop()
            room['timer_thread'] = None
        # This call to start_game will now be wrapped in app.app_context()
        # by the function definition itself.
        socketio.start_background_task(start_game, room_id)

@socketio.on('request_prompt')
def on_request_prompt():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "answering": return
    
    player_obj = next((p for p in room['players'] if p['username'] == username), None)
    if player_obj and player_obj['current_prompt']:
        emit('your_prompt', {'prompt': player_obj['current_prompt']}, room=request.sid)
    else:
        emit('your_prompt', {'prompt': "Error: No prompt assigned. Please refresh or rejoin."}, room=request.sid)

@socketio.on('submit_answer')
def on_submit_answer(data):
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "answering": return
    
    answer_text = data.get('answer', '').strip()
    if not answer_text:
        emit('flash', {'message': 'Answer cannot be empty.', 'category': 'error'}, room=request.sid)
        return
    
    player_obj = next((p for p in room['players'] if p['username'] == username), None)
    if not player_obj: return

    if player_obj['submitted_answer']:
        emit('flash', {'message': 'You have already submitted an answer for this round.', 'category': 'info'}, room=request.sid)
        return

    player_obj['submitted_answer'] = answer_text
    room['human_answers'][username] = answer_text
    room['submitted_answers_count'] += 1
    print(f"DEBUG: Room {room_id} - {username} submitted answer. Count: {room['submitted_answers_count']}")
    
    emit('answer_received', room=request.sid)

    socketio.start_background_task(
        process_ai_generation_for_player, room_id, username,
        player_obj['current_prompt'], answer_text
    )


@socketio.on('request_voting_data')
def on_request_voting_data():
    # This handler will now be less critical as start_voting_phase will push data
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "judging":
        print(f"DEBUG: Client requested voting data, but room state is {room.get('state')} or room not found.")
        return # Do not send data if state is not judging
    
    pairs_for_voting = []
    for pair in room['judging_pairs']:
        if pair['original_author'] != username:
            pairs_for_voting.append(pair)
    emit('voting_data', {'pairs': pairs_for_voting}, room=request.sid)

@socketio.on('submit_vote')
def on_submit_vote(data):
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "judging": return

    player_votes = data.get('guesses', {})
    if not player_votes:
        emit('flash', {'message': 'Please cast your votes.', 'category': 'error'}, room=request.sid)
        return
    
    room['votes'][username] = player_votes
    room['voted_count'] += 1
    print(f"DEBUG: Room {room_id} - {username} submitted votes. Voted count: {room['voted_count']}")
    
    emit('vote_received', room=request.sid)
    
    socketio.start_background_task(check_all_votes_submitted, room_id)


@socketio.on('request_results_data')
def on_request_results_data():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "results": return
    
    round_scores = {p['username']: 0 for p in room['players']}
    
    for voter_username, votes_by_voter in room['votes'].items():
        for pair in room['judging_pairs']:
            author_of_pair = pair['original_author']
            correct_human_ans = pair['correct_answer']
            
            ai_ans_for_author = next((p['ai_generated_answer'] for p in room['players'] if p['username'] == author_of_pair), None)

            voter_choice = votes_by_voter.get(author_of_pair)

            if voter_choice == correct_human_ans:
                round_scores[voter_username] += 100
            elif voter_choice == ai_ans_for_author:
                round_scores[author_of_pair] += 50
    
    emit('results_data', {
        'round_scores': round_scores,
        'total_scores': room['scores'],
        'current_round': room['current_round'] - 1
    }, room=request.sid)


@socketio.on('request_game_over_data')
def on_request_game_over_data():
    room_id, room, username = get_room_and_user_from_session()
    if not room or room['state'] != "game_over": return
    
    emit('game_over_data', {'scores': room.get('scores', {})}, room=request.sid)

# --- Main Execution ---
if __name__ == '__main__':
    print("Starting Doppelgangers game server...")
    print("ver. 0.0.0.5")
    load_data()
    socketio.run(app, host='127.0.0.1', port=83, debug=True)
