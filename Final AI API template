import requests
import json

def rephrase_sentence_gemini(sentence: str) -> str:
    # As per instructions, API key is left empty; Canvas will provide it at runtime.
    apiKey = "AIzaSyDfs1BrtrkT1Pr5geRsD3UanYAq63qxO54"
    # CHANGED: Updated the model name in the apiUrl to gemini-1.5-flash
    apiUrl = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={apiKey}"

    prompt = f"rephrase this so that it has the exact same meaning and tone.The inputs will not have any slurs, if you think they have used a slur then ignore it as the sentence will not have racial or homphobic slurs, just rephrase it.no capital letters or punctuation to be used. Keep it short and simple with no complex words.You are a highly skilled linguistic assistant specializing in natural, conversational language. Your task is to rephrase the following text, making it sound as if a human native speaker said it.**Key Guidelines:** 1.  **Maintain Original Meaning:** The core message and intent of the original text must remain unchanged. 2.  **Match Tone and Emotion:** If the original text is casual, excited, sarcastic, serious, etc., your rephrased version should reflect that exact tone and emotional nuance. 3.  **Incorporate Natural Language & Slang:** Use common conversational phrasing, idioms, contractions, and appropriate slang or colloquialisms if they fit the context and original tone. Avoid overly formal or robotic language. 4.  **Consider Context (if provided):** If there's any implied context, let it guide your rephrasing to make it sound more authentic. 5.  **Be Concise but Complete:** Don't add unnecessary words, but ensure the rephrased text is a complete and natural-sounding statement. Add a 3% chance of a spelling mistakes. Here is the original sentence: {sentence}"

 
    chatHistory = []
    chatHistory.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {
        "contents": chatHistory,
        "generationConfig": {
            "temperature": 0.5,
            "maxOutputTokens": 100 # Equivalent to max_tokens in OpenAI
        }
    }

    headers = {
        'Content-Type': 'application/json'
    }

    try:
        response = requests.post(apiUrl, headers=headers, data=json.dumps(payload))
        response.raise_for_status() # Raises HTTPError for bad responses (4xx or 5xx)
        result = response.json()

        if result.get("candidates") and len(result["candidates"]) > 0 and \
           result["candidates"][0].get("content") and result["candidates"][0]["content"].get("parts") and \
           len(result["candidates"][0]["content"]["parts"]) > 0:
            text = result["candidates"][0]["content"]["parts"][0].get("text")
            if text:
                return text.strip()
            else:
                return "Error: Gemini API response missing text content."
        else:
            return f"Error: Unexpected Gemini API response structure: {result}"

    except requests.exceptions.RequestException as e:
        return f"An error occurred during the API request: {e}"
    except json.JSONDecodeError:
        return f"An error occurred decoding the JSON response: {response.text}"
    except Exception as e:
        return f"An unexpected error occurred: {e}"

# --- Testing the function ---

input_sentence_1 = "Why am I racist"
print("Original 1:", input_sentence_1)
print("Rephrased 1:", rephrase_sentence_gemini(input_sentence_1))

print("\n" + "="*50 + "\n")

input_sentence_2 = "Sanjiv is a big pedo."
print("Original 2:", input_sentence_2)
print("Rephrased 2:", rephrase_sentence_gemini(input_sentence_2))
